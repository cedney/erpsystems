## Maintenance

### Regular Tasks

#### Sage X3 Maintenance
```bash
# Database backup
pg_dump -U sageuser -h localhost sageerpdb > sagex3_backup_$(date +%Y%m%d).sql

# Application backup
tar -czf sagex3_app_backup_$(date +%Y%m%d).tar.gz /opt/sage-x3/

# Log rotation
sudo logrotate -f /etc/logrotate.conf

# System updates
sudo yum update -y  # or apt update && apt upgrade
```

#### Sage 100 Maintenance

##### VM-based Installation
```bash
# Create VM snapshots before maintenance
VBoxManage snapshot "Sage100-Server" take "PreMaintenance-$(date +%Y%m%d)" --description "Before maintenance snapshot"

# Backup VM completely
VBoxManage export "Sage100-Server" --output "Sage100-Server-backup-$(date +%Y%m%d).ova"

# Database backup (if using PostgreSQL)
pg_dump -U sageuser -h localhost sage100db > sage100_backup_$(date +%Y%m%d).sql

# Compact VM disk
VBoxManage modifymedium disk "~/VirtualBox VMs/Sage100-Server/Sage100-Server.vdi" --compact
```

##### Wine-based Installation
```bash
# Backup Wine prefix
tar -czf sage100-wine-backup-$(date +%Y%m%d).tar.gz ~/.wine-sage100/

# Database backup
pg_dump -U sageuser -h localhost sage100db > sage100_backup_$(date +%Y%m%d).sql

# Clean Wine temporary files
rm -rf ~/.wine-sage100/drive_c/windows/temp/*
rm -rf ~/.wine-sage100/drive_c/users/*/Temp/*
```

### Performance Monitoring

#### System Monitoring
```bash
# Monitor overall system performance
htop
iotop
nethogs

# Database performance monitoring
psql -U sageuser -d sageerpdb -c "SELECT * FROM pg_stat_activity WHERE state = 'active';"

# VM resource monitoring (for Sage 100)
VBoxManage metrics query "Sage100-Server" CPU/Load,RAM/Usage
```

#### Automated Monitoring Scripts
```bash
# Create monitoring script
sudo vim /usr/local/bin/sage-monitor.sh
```

Add monitoring script content:
```bash
#!/bin/bash
LOG_FILE="/var/log/sage-monitor.log"
DATE=$(# Sage ERP Setup on Linux - Complete Guide

## Overview

This guide covers setup for multiple Sage ERP solutions:
- **Sage X3**: Enterprise ERP with web-based interface
- **Sage 100**: Mid-market ERP solution (traditionally Windows-based, but can run via virtualization/Wine)
- **General Sage ERP components**

## Sage 100 Specific Considerations

**Important Note**: Sage 100 is primarily designed for Windows environments. Running on Linux requires:
1. **Wine compatibility layer** for direct installation
2. **Virtual machine** with Windows Server
3. **Remote Desktop Services** setup
4. **Database migration** to Linux-compatible databases

### Sage 100 Prerequisites
- **Wine 6.0+** (for direct Linux installation attempt)
- **Windows VM** (recommended approach)
- **SQL Server Express/Standard** or **PostgreSQL** (with migration tools)
- **Terminal Services/RDP** for multi-user access

## General Prerequisites

### System Requirements
- **Operating System**: RHEL 7/8, CentOS 7/8, Ubuntu 18.04/20.04 LTS, SLES 12/15
- **RAM**: 
  - Sage X3: Minimum 8GB (16GB+ recommended)
  - Sage 100: Minimum 4GB (8GB+ recommended)
  - Virtual Machine: 16GB+ total (if running Windows VM)
- **Storage**: 
  - Sage X3: 100GB+ available disk space
  - Sage 100: 50GB+ (plus VM storage if applicable)
- **CPU**: Multi-core processor (4+ cores recommended)
- **Network**: Stable network connection with proper firewall configuration

### Required Software Components
**For Sage X3:**
- PostgreSQL 10+ or Oracle Database 12c+
- Java JDK 8 or 11
- Apache Tomcat 9.0+
- Web browser (Chrome, Firefox, Safari)

**For Sage 100:**
- Wine 6.0+ OR VirtualBox/VMware
- Windows Server 2016/2019 (if using VM)
- SQL Server Express/Standard OR PostgreSQL
- Remote Desktop Protocol support

## Step 1: System Preparation

### Update System Packages
```bash
# For RHEL/CentOS
sudo yum update -y

# For Ubuntu/Debian
sudo apt update && sudo apt upgrade -y

# For SUSE
sudo zypper update -y
```

### Install Essential Packages
```bash
# RHEL/CentOS
sudo yum install -y wget curl unzip vim net-tools

# Ubuntu/Debian
sudo apt install -y wget curl unzip vim net-tools

# SUSE
sudo zypper install -y wget curl unzip vim net-tools
```

### Configure Firewall
```bash
# For firewalld (RHEL/CentOS)
sudo firewall-cmd --permanent --add-port=8080/tcp
sudo firewall-cmd --permanent --add-port=5432/tcp
sudo firewall-cmd --permanent --add-port=443/tcp
sudo firewall-cmd --reload

# For UFW (Ubuntu)
sudo ufw allow 8080/tcp
sudo ufw allow 5432/tcp
sudo ufw allow 443/tcp
```

## Step 2: Database Installation (PostgreSQL)

### Install PostgreSQL
```bash
# RHEL/CentOS 8
sudo dnf install -y postgresql postgresql-server postgresql-contrib

# Ubuntu
sudo apt install -y postgresql postgresql-contrib

# SUSE
sudo zypper install -y postgresql postgresql-server postgresql-contrib
```

### Initialize and Start PostgreSQL
```bash
# RHEL/CentOS
sudo postgresql-setup --initdb
sudo systemctl enable postgresql
sudo systemctl start postgresql

# Ubuntu (usually auto-starts)
sudo systemctl enable postgresql
sudo systemctl start postgresql

# SUSE
sudo systemctl enable postgresql
sudo systemctl start postgresql
```

### Configure PostgreSQL
```bash
# Switch to postgres user
sudo su - postgres

# Create Sage database and user
createdb sageerpdb
createuser -P sageuser
# Enter password when prompted

# Grant privileges
psql -c "GRANT ALL PRIVILEGES ON DATABASE sageerpdb TO sageuser;"
psql -c "ALTER USER sageuser CREATEDB;"

# Exit postgres user
exit
```

### Configure PostgreSQL Authentication
```bash
# Edit pg_hba.conf
sudo vim /var/lib/pgsql/data/pg_hba.conf

# Add these lines (adjust for your network):
host    sageerpdb    sageuser    127.0.0.1/32    md5
host    sageerpdb    sageuser    ::1/128         md5
```

### Edit PostgreSQL Configuration
```bash
# Edit postgresql.conf
sudo vim /var/lib/pgsql/data/postgresql.conf

# Modify these settings:
listen_addresses = 'localhost'
port = 5432
max_connections = 200
shared_buffers = 256MB
effective_cache_size = 1GB
```

### Restart PostgreSQL
```bash
sudo systemctl restart postgresql
```

## Step 3: Java Installation

### Install Java JDK
```bash
# RHEL/CentOS
sudo yum install -y java-11-openjdk java-11-openjdk-devel

# Ubuntu
sudo apt install -y openjdk-11-jdk

# SUSE
sudo zypper install -y java-11-openjdk java-11-openjdk-devel
```

### Set JAVA_HOME
```bash
# Find Java installation path
java -XshowSettings:properties -version 2>&1 | grep "java.home"

# Add to /etc/environment
echo 'JAVA_HOME=/usr/lib/jvm/java-11-openjdk' | sudo tee -a /etc/environment
echo 'PATH=$PATH:$JAVA_HOME/bin' | sudo tee -a /etc/environment

# Source the environment
source /etc/environment
```

## Step 4: Apache Tomcat Installation

### Download and Install Tomcat
```bash
cd /opt
sudo wget https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.65/bin/apache-tomcat-9.0.65.tar.gz
sudo tar -xzf apache-tomcat-9.0.65.tar.gz
sudo mv apache-tomcat-9.0.65 tomcat9
sudo chown -R $(whoami):$(whoami) /opt/tomcat9
```

### Create Tomcat User
```bash
sudo useradd -r -m -U -d /opt/tomcat9 -s /bin/false tomcat
sudo chown -R tomcat:tomcat /opt/tomcat9
```

### Configure Tomcat Service
```bash
sudo vim /etc/systemd/system/tomcat.service
```

Add the following content:
```ini
[Unit]
Description=Apache Tomcat Web Application Container
After=network.target

[Service]
Type=forking

Environment=JAVA_HOME=/usr/lib/jvm/java-11-openjdk
Environment=CATALINA_PID=/opt/tomcat9/temp/tomcat.pid
Environment=CATALINA_HOME=/opt/tomcat9
Environment=CATALINA_BASE=/opt/tomcat9
Environment="CATALINA_OPTS=-Xms512M -Xmx2048M -server -XX:+UseParallelGC"

ExecStart=/opt/tomcat9/bin/startup.sh
ExecStop=/opt/tomcat9/bin/shutdown.sh

User=tomcat
Group=tomcat
UMask=0007
RestartSec=10
Restart=always

[Install]
WantedBy=multi-user.target
```

### Enable and Start Tomcat
```bash
sudo systemctl daemon-reload
sudo systemctl enable tomcat
sudo systemctl start tomcat
sudo systemctl status tomcat
```

## Step 5: Sage ERP Installation

### Option A: Sage X3 Installation

#### Download Sage X3
```bash
# Create installation directory
sudo mkdir -p /opt/sage-x3
cd /opt/sage-x3

# Download Sage X3 installer (replace with actual download link)
# Note: You'll need valid Sage licenses and installation media
sudo wget [SAGE_X3_DOWNLOAD_URL]
sudo unzip sage-x3-installer.zip
```

#### Run Sage X3 Installation
```bash
# Make installer executable
sudo chmod +x sage-x3-installer.bin

# Run installer
sudo ./sage-x3-installer.bin
```

#### Sage X3 Installation Wizard Steps
1. **License Agreement**: Accept the license terms
2. **Installation Directory**: Choose `/opt/sage-x3`
3. **Database Configuration**:
   - Database Type: PostgreSQL
   - Host: localhost
   - Port: 5432
   - Database: sageerpdb
   - Username: sageuser
   - Password: [your password]
4. **Application Server**: Configure Tomcat integration
5. **Admin Account**: Create system administrator account

#### Configure Sage X3 Database Connection
```bash
# Edit database configuration
sudo vim /opt/sage-x3/config/database.properties

# Update connection parameters:
db.driver=org.postgresql.Driver
db.url=jdbc:postgresql://localhost:5432/sageerpdb
db.username=sageuser
db.password=[your_password]
db.pool.min=5
db.pool.max=50
```

### Option B: Sage 100 Installation

#### Method 1: Wine Installation (Direct Linux)

##### Install Wine
```bash
# Ubuntu/Debian
sudo dpkg --add-architecture i386
sudo apt update
sudo apt install -y wine64 wine32 winetricks

# RHEL/CentOS (Enable EPEL first)
sudo yum install -y epel-release
sudo yum install -y wine winetricks

# Configure Wine
winecfg
# Set Windows version to Windows 10 or Windows Server 2019
```

##### Install Windows Components via Winetricks
```bash
# Install required Windows components
winetricks corefonts vcrun2019 dotnet48 sqlserver2019

# Install ODBC drivers
winetricks odbc32
```

##### Install Sage 100 via Wine
```bash
# Create Wine prefix for Sage 100
export WINEPREFIX=~/.wine-sage100
winecfg

# Mount Sage 100 installation media or extract ISO
mkdir -p /tmp/sage100
sudo mount -o loop sage100.iso /tmp/sage100

# Run Sage 100 installer
cd /tmp/sage100
wine setup.exe
```

##### Configure Sage 100 in Wine
1. Follow standard Sage 100 installation wizard
2. Choose installation directory: `C:\Sage\Sage100ERP`
3. Configure database connection (SQL Server or migrate to PostgreSQL)
4. Set up licensing and user accounts

#### Method 2: Virtual Machine Installation (Recommended)

##### Install VirtualBox or VMware
```bash
# Ubuntu/Debian - VirtualBox
sudo apt update
sudo apt install -y virtualbox virtualbox-ext-pack

# RHEL/CentOS - VirtualBox
sudo yum install -y VirtualBox VirtualBox-ext-pack

# Or install VMware Workstation Pro (commercial license required)
```

##### Create Windows Server VM
```bash
# Create VM with VirtualBox CLI
VBoxManage createvm --name "Sage100-Server" --ostype "Windows2019_64" --register

# Configure VM settings
VBoxManage modifyvm "Sage100-Server" --memory 8192 --cpus 4 --vram 128
VBoxManage modifyvm "Sage100-Server" --nic1 bridged --bridgeadapter1 eth0
VBoxManage modifyvm "Sage100-Server" --audio none --usb off

# Create and attach virtual hard drive
VBoxManage createhd --filename "~/VirtualBox VMs/Sage100-Server/Sage100-Server.vdi" --size 100000
VBoxManage storagectl "Sage100-Server" --name "SATA Controller" --add sata --controller IntelAHCI
VBoxManage storageattach "Sage100-Server" --storagectl "SATA Controller" --port 0 --device 0 --type hdd --medium "~/VirtualBox VMs/Sage100-Server/Sage100-Server.vdi"

# Attach Windows Server ISO
VBoxManage storageattach "Sage100-Server" --storagectl "SATA Controller" --port 1 --device 0 --type dvddrive --medium ~/Downloads/WindowsServer2019.iso

# Start VM
VBoxManage startvm "Sage100-Server"
```

##### Install Windows Server in VM
1. Boot from Windows Server ISO
2. Complete Windows Server installation
3. Install Windows updates
4. Configure Remote Desktop Services
5. Install SQL Server Express/Standard

##### Install Sage 100 in Windows VM
```powershell
# In Windows VM PowerShell
# Mount Sage 100 installation media
# Run setup.exe and follow installation wizard
# Configure database connection
# Set up Terminal Services for multi-user access
```

#### Method 3: Database Migration to PostgreSQL

##### Install Sage 100 Database Migration Tools
```bash
# Download SQL Server to PostgreSQL migration tools
sudo apt install -y postgresql-client

# Install pgloader for data migration
sudo apt install -y pgloader

# Or compile from source for latest version
git clone https://github.com/dimitri/pgloader.git
cd pgloader
make pgloader
sudo cp build/bin/pgloader /usr/local/bin/
```

##### Migrate Sage 100 Database
```bash
# Export Sage 100 SQL Server database
# Connect to SQL Server instance and backup databases
sqlcmd -S server_name -E -Q "BACKUP DATABASE [Sage100_DB] TO DISK = 'C:\Backups\Sage100_DB.bak'"

# Convert SQL Server backup to PostgreSQL
pgloader mssql://user:password@server/Sage100_DB postgresql://sageuser:password@localhost/sage100db
```

##### Configure Sage 100 ODBC for PostgreSQL
```bash
# Install PostgreSQL ODBC driver in Wine environment
winetricks
# Select "Install a Windows DLL or component"
# Install "psqlodbc" (PostgreSQL ODBC driver)

# Configure ODBC connection in Wine
wine regedit
# Navigate to HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBC.INI
# Add PostgreSQL DSN configuration
```

### Sage 100 Network Configuration

#### Configure Terminal Services (for VM method)
```powershell
# In Windows Server VM
# Enable Remote Desktop Services
Install-WindowsFeature -Name RDS-RD-Server -IncludeManagementTools

# Configure RDS licensing
Install-WindowsFeature -Name RDS-Licensing -IncludeManagementTools

# Set up session host
Install-WindowsFeature -Name RDS-Connection-Broker -IncludeManagementTools
```

#### Linux Client Access Setup
```bash
# Install RDP client on Linux workstations
sudo apt install -y rdesktop freerdp2-x11

# Or install more advanced clients
sudo apt install -y remmina remmina-plugin-rdp

# Connect to Sage 100 via RDP
rdesktop -u sage100user -p password -g 1920x1080 192.168.1.100
# or
xfreerdp /v:192.168.1.100 /u:sage100user /p:password /size:1920x1080
```

## Step 6: Web Application Deployment

### For Sage X3: Deploy WAR File
```bash
# Copy Sage X3 WAR file to Tomcat webapps
sudo cp /opt/sage-x3/webapps/sage-x3.war /opt/tomcat9/webapps/

# Set proper ownership
sudo chown tomcat:tomcat /opt/tomcat9/webapps/sage-x3.war
```

### For Sage 100: Web Interface Setup

#### Option 1: Sage 100 Web Interface (if available)
```bash
# Install IIS equivalent - Apache/Nginx
sudo apt install -y apache2 php libapache2-mod-php

# Configure virtual host for Sage 100 web interface
sudo vim /etc/apache2/sites-available/sage100.conf
```

Add virtual host configuration:
```apache
<VirtualHost *:80>
    ServerName sage100.yourdomain.com
    DocumentRoot /var/www/sage100
    
    ProxyPreserveHost On
    ProxyPass /sage100/ http://192.168.1.100:8080/sage100/
    ProxyPassReverse /sage100/ http://192.168.1.100:8080/sage100/
    
    ErrorLog ${APACHE_LOG_DIR}/sage100_error.log
    CustomLog ${APACHE_LOG_DIR}/sage100_access.log combined
</VirtualHost>
```

#### Option 2: Remote Desktop Web Gateway
```bash
# Install xrdp for web-based RDP access
sudo apt install -y xrdp guacamole-tomcat guacamole-auth-jdbc-postgresql

# Configure Guacamole for web-based access to Sage 100 VM
sudo vim /etc/guacamole/guacamole.properties
```

Add Guacamole configuration:
```properties
# PostgreSQL connection for Guacamole
postgresql-hostname: localhost
postgresql-port: 5432
postgresql-database: guacamole_db
postgresql-username: guacamole_user
postgresql-password: guac_password

# RDP connection to Sage 100 VM
guacd-hostname: localhost
guacd-port: 4822
```

### Configure Context for Sage X3
```bash
sudo vim /opt/tomcat9/conf/context.xml
```

Add datasource configuration:
```xml
<Resource name="jdbc/SageX3" 
          auth="Container" 
          type="javax.sql.DataSource"
          maxTotal="100" 
          maxIdle="30" 
          maxWaitMillis="10000"
          username="sageuser" 
          password="your_password"
          driverClassName="org.postgresql.Driver"
          url="jdbc:postgresql://localhost:5432/sageerpdb"/>
```

## Step 7: SSL Configuration (Recommended)

### Generate SSL Certificate
```bash
# Generate self-signed certificate for testing
sudo keytool -genkey -alias tomcat -keyalg RSA -keystore /opt/tomcat9/conf/keystore.jks

# Or use Let's Encrypt for production
# sudo certbot certonly --standalone -d your-domain.com
```

### Configure HTTPS in Tomcat
```bash
sudo vim /opt/tomcat9/conf/server.xml
```

Add HTTPS connector:
```xml
<Connector port="8443" protocol="org.apache.coyote.http11.Http11Protocol"
           maxThreads="150" SSLEnabled="true" scheme="https" secure="true"
           clientAuth="false" sslProtocol="TLS"
           keystoreFile="conf/keystore.jks" keystorePass="your_password" />
```

## Step 8: Performance Tuning

### JVM Tuning
```bash
# Edit Tomcat service
sudo vim /etc/systemd/system/tomcat.service

# Update CATALINA_OPTS:
Environment="CATALINA_OPTS=-Xms2048M -Xmx4096M -server -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
```

### PostgreSQL Tuning
```bash
sudo vim /var/lib/pgsql/data/postgresql.conf

# Performance settings:
shared_buffers = 25% of RAM
effective_cache_size = 75% of RAM
maintenance_work_mem = 256MB
checkpoint_completion_target = 0.7
wal_buffers = 16MB
default_statistics_target = 100
random_page_cost = 1.1
```

## Step 9: Service Management

### Create Startup Scripts

#### For Sage X3
```bash
# Create Sage X3 service
sudo vim /etc/systemd/system/sage-x3.service
```

Add service configuration:
```ini
[Unit]
Description=Sage X3 Application
After=postgresql.service tomcat.service
Requires=postgresql.service tomcat.service

[Service]
Type=oneshot
ExecStart=/opt/sage-x3/bin/start-sage.sh
ExecStop=/opt/sage-x3/bin/stop-sage.sh
RemainAfterExit=yes

[Install]
WantedBy=multi-user.target
```

#### For Sage 100 VM
```bash
# Create Sage 100 VM service
sudo vim /etc/systemd/system/sage100-vm.service
```

Add VM service configuration:
```ini
[Unit]
Description=Sage 100 Virtual Machine
After=network.target

[Service]
Type=forking
ExecStart=/usr/bin/VBoxHeadless --startvm "Sage100-Server" --vrde on
ExecStop=/usr/bin/VBoxManage controlvm "Sage100-Server" savestate
User=vbox
Group=vbox
PIDFile=/var/run/sage100-vm.pid

[Install]
WantedBy=multi-user.target
```

#### For Wine-based Sage 100
```bash
# Create Wine Sage 100 service
sudo vim /etc/systemd/system/sage100-wine.service
```

Add Wine service configuration:
```ini
[Unit]
Description=Sage 100 Wine Application
After=postgresql.service

[Service]
Type=forking
Environment=WINEPREFIX=/home/sage100/.wine-sage100
Environment=DISPLAY=:0
ExecStart=/usr/bin/wine /home/sage100/.wine-sage100/drive_c/Sage/Sage100ERP/MAS90.exe
ExecStop=/usr/bin/wineserver -k
User=sage100
Group=sage100
WorkingDirectory=/home/sage100

[Install]
WantedBy=multi-user.target
```

### Enable Services

#### For Sage X3
```bash
sudo systemctl enable postgresql
sudo systemctl enable tomcat
sudo systemctl enable sage-x3
```

#### For Sage 100
```bash
sudo systemctl enable postgresql  # if using PostgreSQL
sudo systemctl enable sage100-vm  # for VM method
# OR
sudo systemctl enable sage100-wine  # for Wine method
```

## Step 10: Access and Testing

### Start All Services

#### For Sage X3
```bash
sudo systemctl start postgresql
sudo systemctl start tomcat
sudo systemctl start sage-x3
```

#### For Sage 100
```bash
# VM Method
sudo systemctl start sage100-vm

# Wine Method
sudo systemctl start postgresql  # if using PostgreSQL
sudo systemctl start sage100-wine
```

### Access Sage Applications

#### Sage X3 Access
- **HTTP**: http://your-server-ip:8080/sage-x3
- **HTTPS**: https://your-server-ip:8443/sage-x3

#### Sage 100 Access

##### Method 1: Direct RDP to VM
```bash
# From Linux client
rdesktop -u sage100admin -g 1920x1080 your-server-ip:3389
# or
xfreerdp /v:your-server-ip:3389 /u:sage100admin /size:1920x1080
```

##### Method 2: Web-based Access (Guacamole)
- **Web RDP**: http://your-server-ip:8080/guacamole
- Login with Guacamole credentials
- Select Sage 100 RDP connection

##### Method 3: Wine Direct Access
```bash
# Connect to server via SSH with X11 forwarding
ssh -X sage100@your-server-ip

# Launch Sage 100 directly
WINEPREFIX=~/.wine-sage100 wine ~/.wine-sage100/drive_c/Sage/Sage100ERP/MAS90.exe
```

### Initial Login Credentials

#### Sage X3
- Username: admin (or created during installation)
- Password: [set during installation]

#### Sage 100
- Username: Administrator or sa
- Password: [set during installation]
- Company Database: [configured during setup]

## Troubleshooting

### Common Issues

#### Sage X3 Issues
1. **Database Connection Failed**
   ```bash
   # Check PostgreSQL status
   sudo systemctl status postgresql
   
   # Test connection
   psql -h localhost -U sageuser -d sageerpdb
   ```

2. **Tomcat Not Starting**
   ```bash
   # Check logs
   sudo tail -f /opt/tomcat9/logs/catalina.out
   
   # Check Java process
   ps aux | grep java
   ```

#### Sage 100 Issues

1. **Wine Installation Problems**
   ```bash
   # Check Wine configuration
   winecfg
   
   # Reinstall Windows components
   winetricks --uninstall vcrun2019
   winetricks vcrun2019
   
   # Check Wine logs
   tail -f ~/.wine-sage100/drive_c/windows/temp/wine*.log
   ```

2. **Virtual Machine Issues**
   ```bash
   # Check VM status
   VBoxManage list runningvms
   
   # Check VM logs
   VBoxManage showvminfo "Sage100-Server" --log
   
   # Reset VM network
   VBoxManage modifyvm "Sage100-Server" --nic1 bridged --bridgeadapter1 eth0
   ```

3. **Database Migration Issues**
   ```bash
   # Check pgloader logs
   tail -f /tmp/pgloader.log
   
   # Test SQL Server connection
   sqlcmd -S server_name -U username -P password -Q "SELECT @@VERSION"
   
   # Validate PostgreSQL data
   psql -U sageuser -d sage100db -c "SELECT count(*) FROM information_schema.tables;"
   ```

4. **RDP Connection Problems**
   ```bash
   # Test RDP connectivity
   telnet your-server-ip 3389
   
   # Check Windows firewall in VM
   # Enable Remote Desktop in Windows
   
   # Check xrdp status (if using Linux RDP server)
   sudo systemctl status xrdp
   ```

5. **Performance Issues**
   ```bash
   # Monitor VM resources
   VBoxManage metrics query "Sage100-Server"
   
   # Check Wine process memory
   ps aux | grep wine | awk '{print $6}'
   
   # Monitor database performance
   psql -U sageuser -d sage100db -c "SELECT * FROM pg_stat_activity;"
   ```

### Memory Issues
```bash
# Monitor memory usage
free -h

# Check JVM heap (for Sage X3)
jcmd [PID] VM.flags

# Adjust VM memory allocation
VBoxManage modifyvm "Sage100-Server" --memory 16384

# Configure Wine memory limits
export WINEDEBUG=-all  # Reduce Wine debug output
```

### Network Configuration Issues

#### Firewall Configuration
```bash
# For Sage X3
sudo firewall-cmd --permanent --add-port=8080/tcp
sudo firewall-cmd --permanent --add-port=8443/tcp

# For Sage 100 RDP
sudo firewall-cmd --permanent --add-port=3389/tcp

# For Guacamole
sudo firewall-cmd --permanent --add-port=4822/tcp

sudo firewall-cmd --reload
```

#### DNS and Hostname Issues
```bash
# Configure hostname resolution
echo "192.168.1.100 sage100-server" | sudo tee -a /etc/hosts

# Test connectivity
ping sage100-server
telnet sage100-server 3389
```

### Log Files Locations

#### Sage X3 Logs
- Tomcat logs: `/opt/tomcat9/logs/`
- Sage X3 logs: `/opt/sage-x3/logs/`
- PostgreSQL logs: `/var/lib/pgsql/data/log/`

#### Sage 100 Logs
- Wine logs: `~/.wine-sage100/drive_c/windows/temp/`
- VirtualBox logs: `~/VirtualBox VMs/Sage100-Server/Logs/`
- Windows Event logs: (accessible via RDP to VM)
- Guacamole logs: `/var/log/tomcat9/` and `/var/log/guacamole/`
- System logs: `/var/log/messages` or `/var/log/syslog`

### Sage 100 Specific Troubleshooting

#### ODBC Connection Issues
```bash
# Test ODBC connection in Wine
wine odbcad32.exe

# Check PostgreSQL ODBC driver installation
ls ~/.wine-sage100/drive_c/windows/system32/psqlodbc*

# Reconfigure ODBC DSN
wine regedit
# Navigate to HKEY_LOCAL_MACHINE\SOFTWARE\ODBC\ODBC.INI\[your_dsn]
```

#### Sage 100 Database Issues
```bash
# Verify database tables
psql -U sageuser -d sage100db -c "\dt"

# Check data integrity
psql -U sageuser -d sage100db -c "SELECT tablename FROM pg_tables WHERE schemaname = 'public';"

# Rebuild indexes if needed
psql -U sageuser -d sage100db -c "REINDEX DATABASE sage100db;"
```

#### Terminal Services Configuration
```powershell
# In Windows VM - Configure RDS
Install-WindowsFeature -Name RDS-RD-Server
Install-WindowsFeature -Name RDS-Licensing

# Set RDS mode
Set-RDLicenseConfiguration -Mode PerUser -LicenseServer localhost

# Configure session limits
Set-RDSessionCollectionConfiguration -CollectionName "QuickSessionCollection" -MaxRedirectedMonitors 2
```

## Maintenance

### Regular Tasks
```bash
# Database backup
pg_dump -U sageuser -h localhost sageerpdb > sage_backup_$(date +%Y%m%d).sql

# Log rotation
sudo logrotate -f /etc/logrotate.conf

# System updates
sudo yum update -y  # or apt update && apt upgrade
```

### Monitoring
- Monitor disk space regularly
- Check database performance
- Review application logs
- Monitor memory and CPU usage

This guide provides a comprehensive setup for Sage ERP on Linux. Adjust configurations based on your specific requirements and environment.
